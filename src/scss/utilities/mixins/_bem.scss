// -------------------------------------------------------------------------- //
//	BEM Helpers
// -------------------------------------------------------------------------- //
$element-separator: '__';	// .block[__]element
$modifier-separator: '.-';	// .block[.-]modifier
$state-prefix: '.is';		// .block[.is]-state

// This variable saves the current state prefix
// because it can be practically anything
$_current-state-prefix: '';

// If selector has e.g. a hover state,
// we need to strip it from the block name
@function fix-selector($name) {
	$has-hover: str-index($name, ':');
	$has-child: str-index($name, '>');

	@if $has-hover {
		@return str-slice($name, 0, $has-hover - 1);
	} @else if $has-child {
		@return str-slice($name, 0, $has-child - 2);
	} @else {
		@return false;
	}
}

// Block
@mixin block($args...) {
	@each $name in $args {
		.#{$name} {
			@content;
		}
	}
}

@mixin b($args...) {
	@include block($args...) {
		@content;
	}
}

// Element
@mixin element($args...) {
	$selector: fix-selector(#{&});
	$custom-block: if(length($args) > 1, nth($args, 1), false);

	@if $custom-block {
		// BUGGY !!!!!
		// Get rid off any extra stuff after the main block.
		// Sort of @at-root but better for this particular situation
		@if $custom-block == true {
			$block: str-slice(#{&}, 2, str-length(#{&}));

			$has-element: str-index($block, $element-separator);
			$has-modifier: str-index($block, $modifier-separator);
			$has-state: str-index($block, $_current-state-prefix);

			@if $has-element {
				$selector: str-slice(#{&}, 1, $has-element);
			} @else {
				@if $has-modifier {
					$selector: str-slice(#{&}, 1, $has-modifier);
				}

				@if $has-state {
					$selector: str-slice(#{&}, 1, $has-state);
				}
			}
		// Replace current block name with a custom one
		} @else if str-index($custom-block, '.') == 1 {
			$selector: $custom-block;
		} @else {
			$custom-block: false;
		}
	}

	@each $name in $args {
		@if not $custom-block or $custom-block and index($args, $name) > 1 {
			@if $selector {
				#{$selector}#{$element-separator}#{$name} {
					@content;
				}
			} @else {
				&#{$element-separator}#{$name} {
					@content;
				}
			}
		}
	}
}

@mixin e($args...) {
	@include element($args...) {
		@content;
	}
}

// Modifier
@mixin modifier($args...) {
	@each $name in $args {
		&#{$modifier-separator}#{$name} {
			@content;
		}
	}
}

@mixin m($args...) {
	@include modifier($args...) {
		@content;
	}
}

// State
@mixin state($args...) {
	// If there's multiple `$args` and the first one is a class,
	// use that value as a `$state-prefix`
	$custom-prefix: length($args) > 1 and str-index(nth($args, 1), '.') == 1;

	@if $custom-prefix {
		$state-prefix: nth($args, 1);
	}

	// Set as global so we can access it in other mixins
	$_current-state-prefix: $state-prefix !global;

	@each $name in $args {
		// If `$custom-prefix` exists, skip the first iteration
		@if not $custom-prefix or $custom-prefix and index($args, $name) > 1 {
			&#{$state-prefix}-#{$name} {
				@content;
			}
		}
	}
}

@mixin s($args...) {
	@include state($args...) {
		@content;
	}
}
