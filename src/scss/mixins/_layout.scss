// -------------------------------------------------------------------------- //
//	Clearfix
// -------------------------------------------------------------------------- //
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//	  `contenteditable` attribute is included anywhere else in the document.
//	  Otherwise it causes space to appear at the top and bottom of elements
//	  that receive the `clearfix` class.
// 2. The use of `table` rather than `block` is only necessary if using
//	  `:before` to contain the top-margins of child elements.
@mixin clearfix() {
	&:before,
	&:after {
		content: ''; // 1
		display: table; // 2
	}

	&:after { clear: both; }
}

// -------------------------------------------------------------------------- //
//	Creates float classes for each breakpoint.
// -------------------------------------------------------------------------- //
@mixin push-pull($bp) {
	// XXS doesn't have a min value.
	@if $bp == xxs {
		.u-push-#{$bp} {
			float: right;

			[dir='rtl'] & { float: left; }
		}

		.u-pull-#{$bp} {
			float: left;

			[dir='rtl'] & { float: right; }
		}

		@media #{bp-max($bp)} {
			.u-push-#{$bp}-only {
				float: right;

				[dir='rtl'] & { float: left; }
			}

			.u-pull-#{$bp}-only {
				float: left;

				[dir='rtl'] & { float: right; }
			}
		}
	} @else {
		@media #{bp-min($bp)} {
			.u-push-#{$bp} {
				float: right;

				[dir='rtl'] & { float: left; }
			}

			.u-pull-#{$bp} {
				float: left;

				[dir='rtl'] & { float: right; }
			}

			// Large doesn't need an "only" since it operates on min width.
			@if $bp != l {
				@media #{bp-max($bp)} {
					.u-push-#{$bp}-only {
						float: right;

						[dir='rtl'] & { float: left; }
					}

					.u-pull-#{$bp}-only {
						float: left;

						[dir='rtl'] & { float: right; }
					}
				}
			}
		}
	}
}

// -------------------------------------------------------------------------- //
//	Layout
// -------------------------------------------------------------------------- //
@mixin layout($bp) {
	// XXS doesn't have a min value.
	@if $bp == xxs {
		.u-block-#{$bp} { display: block; }

		.u-inline-block-#{$bp} { display: inline-block; }

		.u-inline-#{$bp} {display: inline; }

		@media #{bp-max($bp)} {
			.u-block-#{$bp}-only { display: block; }

			.u-inline-block-#{$bp}-only { display: inline-block; }

			.u-inline-#{$bp}-only { display: inline; }
		}
	} @else {
		@media #{bp-min($bp)} {
			.u-block-#{$bp} { display: block; }

			.u-inline-block-#{$bp} { display: inline-block; }

			.u-inline-#{$bp} { display: inline; }

			// Large doesn't need an "only" since it operates on min width.
			@if $bp != l {
				@media #{bp-max($bp)} {
					.u-block-#{$bp}-only { display: block; }

					.u-inline-block-#{$bp}-only { display: inline-block; }

					.u-inline-#{$bp}-only { display: inline; }
				}
			}
		}
	}
}

// -------------------------------------------------------------------------- //
//	Creates text align classes for each breakpoint
// -------------------------------------------------------------------------- //
@mixin text-align($bp) {
	// XS doesn't have a min value
	@if $bp == xxs {
		.u-text-#{$bp}-left {
			text-align: left;

			[dir='rtl'] & { text-align: right; }
		}

		.u-text-#{$bp}-right {
			text-align: right;

			[dir='rtl'] & { text-align: left; }
		}

		.u-text-#{$bp}-center { text-align: center; }

		@media #{bp-max($bp)} {
			.u-text-#{$bp}-left-only {
				text-align: left;

				[dir='rtl'] & { text-align: right; }
			}

			.u-text-#{$bp}-right-only {
				text-align: right;

				[dir='rtl'] & { text-align: left; }
			}

			.u-text-#{$bp}-center-only { text-align: center; }
		}
	} @else {
		@media #{bp-min($bp)} {
			.u-text-#{$bp}-left {
				text-align: left;

				[dir='rtl'] & { text-align: right; }
			}

			.u-text-#{$bp}-right {
				text-align: right;

				[dir='rtl'] & { text-align: left; }
			}

			.u-text-#{$bp}-center { text-align: center; }

			// Large doesn't need an "only" since it operates on min width.
			@if $bp != l {
				@media #{bp-max($bp)} {
					.u-text-#{$bp}-left {
						text-align: left;

						[dir='rtl'] & { text-align: right; }
					}

					.u-text-#{$bp}-right {
						text-align: right;

						[dir='rtl'] & { text-align: left; }
					}

					.u-text-#{$bp}-center { text-align: center; }
				}
			}
		}
	}
}

// -------------------------------------------------------------------------- //
//	Creates grid state classes for each breakpoint.
// -------------------------------------------------------------------------- //
@mixin grid-state($bp, $width) {
	@media #{bp($bp)} {
		.u-grid-state-indicator {
			width: $width;
		}
	}
}
